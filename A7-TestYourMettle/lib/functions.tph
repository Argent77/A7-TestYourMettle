/**
 * Returns a non-zero value in "patched" if the game has been patched to v2.0 or higher.
 */
DEFINE_ACTION_FUNCTION IS_PATCHED_V2
RET patched
BEGIN
  OUTER_SET patched = (FILE_EXISTS ~engine.lua~ AND FILE_EXISTS_IN_GAME ~wmpflag.ids~) ? 1 : 0
END

DEFINE_PATCH_FUNCTION IS_PATCHED_V2
RET patched
BEGIN
  INNER_ACTION BEGIN LAF IS_PATCHED_V2 RET patched END END
END


/**
 * Converts any decimal number into a hexadecimal number
 */
DEFINE_ACTION_FUNCTION TO_HEX_NUMBER
INT_VAR
  value     = 0   // the decimal number
  minDigits = 1   // min. number of digits in return value (not counting sign)
  prefix    = 0   // whether to return number with "0x" prefix
  signed    = 1   // whether number is treated as a signed number
  upperCase = 0   // whether to represent alphabetic digits in upper case
RET
  hexNumber       // returned as string without prefix
BEGIN
  ACTION_IF (minDigits < 1) BEGIN OUTER_SET minDigits = 1 END
  ACTION_IF (minDigits > 8) BEGIN OUTER_SET minDigits = 8 END
  OUTER_TEXT_SPRINT hexNumber ~~
  ACTION_DEFINE_ARRAY digit BEGIN ~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~ ~a~ ~b~ ~c~ ~d~ ~e~ ~f~ END

  ACTION_IF (signed && value < 0) BEGIN
    OUTER_SET isSigned = 1
    OUTER_SET value = 0 - value
  END ELSE BEGIN
    OUTER_SET isSigned = 0
  END

  OUTER_WHILE (value != 0) BEGIN
    OUTER_SET curDigit = value BAND 0xf
    OUTER_SET value = value BLSR 4
    OUTER_TEXT_SPRINT hexDigit $EVAL digit(~%curDigit%~)
    OUTER_TEXT_SPRINT hexNumber ~%hexDigit%%hexNumber%~
  END

  OUTER_WHILE (STRING_LENGTH ~%hexNumber%~ < minDigits) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~0%hexNumber%~
  END

  ACTION_IF (upperCase) BEGIN
    ACTION_TO_UPPER ~hexNumber~
  END

  ACTION_IF (prefix) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~0x%hexNumber%~
  END

  ACTION_IF (isSigned) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~-%hexNumber%~
  END
END

DEFINE_PATCH_FUNCTION TO_HEX_NUMBER
INT_VAR
  value     = 0
  minDigits = 1
  prefix    = 0
  signed    = 1
  upperCase = 0
RET
  hexNumber
BEGIN
  INNER_ACTION BEGIN
    LAF TO_HEX_NUMBER INT_VAR value minDigits prefix signed upperCase RET hexNumber END
  END
END


// Animation slots reserved by vanilla or mod-added game creatures (in hexadecimal format)
// Supported mods:
// - Bearwalker + extended Werebear animation
// - Pack Mule
<<<<<<<< .../inlined/creature/animation/slots.txt
"0410" "1000" "1003" "1004" "1100" "1101" "1102" "1103" "1104" "1105" "1200" "1201" "1202" "1203" "1204" "1205" "1206" "1207" "1208" "1300" "2000" "2100" "2200" "2300" "3000" "3001" "4000" "4001" "4002" "4010" "4012" "4100" "4101" "4102" "4110" "4112" "4200" "4300" "4400" "4410" "4500" "4600" "4700" "4710" "4800" "5000" "5001" "5002" "5003" "5010" "5011" "5012" "5013" "5100" "5101" "5102" "5103" "5110" "5111" "5112" "5113" "5200" "5201" "5202" "5210" "5211" "5212" "5300" "5301" "5302" "5303" "5310" "5311" "5312" "5313" "6000" "6001" "6002" "6003" "6004" "6005" "6010" "6011" "6012" "6013" "6014" "6015" "6100" "6101" "6102" "6103" "6104" "6105" "6110" "6111" "6112" "6113" "6114" "6115" "6200" "6201" "6202" "6204" "6205" "6210" "6211" "6212" "6214" "6215" "6300" "6301" "6302" "6303" "6304" "6305" "6310" "6311" "6312" "6313" "6314" "6315" "6400" "6401" "6402" "6403" "6404" "6405" "6406" "6500" "6510" "6621" "7000" "7001" "7100" "7101" "7200" "7201" "7202" "7203" "7300" "7301" "7302" "7310" "7311" "7312" "7313" "7314" "7320" "7321" "7400" "7401" "7402" "7500" "7501" "7600" "7601" "7602" "7603" "7604" "7700" "7701" "7702" "7703" "7800" "7801" "7802" "7900" "7901" "7902" "7903" "7904" "7a00" "7a01" "7a02" "7a03" "7a04" "7b00" "7b01" "7b02" "7b03" "7b04" "7b05" "7b06" "7c00" "7c01" "7d00" "7d01" "7d02" "7d03" "7d04" "7d05" "7d06" "7d07" "7d08" "7e00" "7e01" "7f00" "7f01" "7f02" "7f03" "7f04" "7f05" "7f06" "7f07" "7f08" "7f09" "7f0a" "7f0b" "7f0c" "7f0d" "7f0e" "7f0f" "7f10" "7f11" "7f12" "7f13" "7f14" "7f15" "7f16" "7f17" "7f18" "7f19" "7f20" "7f21" "7f22" "7f23" "7f24" "7f27" "7f28" "7f29" "7f2a" "7f2b" "7f2c" "7f2d" "7f2e" "7f2f" "7f30" "7f31" "7f32" "7f33" "7f34" "7f35" "7f36" "7f37" "7f38" "7f39" "7f3a" "7f3b" "7f3c" "7f3d" "7f3e" "7f3f" "7f40" "7f41" "7f42" "7f43" "7f44" "7f45" "7f46" "7f47" "7f48" "7f49" "7f4a" "7f4b" "7f4c" "7f4d" "7f4e" "7f4f" "7f50" "7f51" "7f52" "7f53" "7f54" "7f55" "7f56" "7f57" "7f58" "7f59" "7f5a" "7f5b" "7f5c" "7f5d" "7f5e" "7f5f" "7f60" "7f61" "7f62" "8000" "8100" "8200" "9000" "a000" "a100" "a200" "a201" "a202" "b000" "b100" "b200" "b210" "b300" "b310" "b400" "b410" "b500" "b510" "b600" "b610" "b700" "c000" "c100" "c200" "c300" "c400" "c500" "c600" "c610" "c700" "c710" "c800" "c810" "c900" "c910" "ca00" "ca10" "cb00" "cc00" "cc01" "cc02" "cc04" "d000" "d100" "d200" "d300" "d400" "e000" "e010" "e020" "e040" "e050" "e060" "e070" "e080" "e090" "e0a0" "e0b0" "e0c0" "e0d0" "e0e0" "e0f0" "e0f1" "e0f2" "e200" "e210" "e220" "e230" "e240" "e241" "e242" "e243" "e244" "e245" "e246" "e247" "e248" "e249" "e24a" "e24b" "e24c" "e24d" "e24e" "e24f" "e250" "e251" "e252" "e253" "e254" "e255" "e256" "e257" "e258" "e259" "e25a" "e25b" "e25c" "e25d" "e25e" "e25f" "e260" "e261" "e262" "e263" "e264" "e265" "e266" "e267" "e26a" "e26b" "e26d" "e26e" "e26f" "e270" "e271" "e272" "e273" "e274" "e276" "e279" "e27d" "e27e" "e27f" "e280" "e281" "e282" "e283" "e288" "e289" "e28a" "e28b" "e28c" "e28d" "e28e" "e28f" "e290" "e291" "e292" "e293" "e294" "e300" "e310" "e320" "e330" "e400" "e410" "e420" "e430" "e440" "e441" "e442" "e443" "e444" "e500" "e510" "e520" "e600" "e610" "e6fe" "e700" "e710" "e720" "e800" "e810" "e820" "e830" "e840" "e900" "e910" "ea00" "ea10" "ea20" "eb00" "eb10" "eb20" "ec00" "ec10" "ec20" "ed00" "ed10" "ed20" "ee00" "ee10" "ef10"
>>>>>>>>
OUTER_TEXT_SPRINT animationSlotsPath ".../inlined/creature/animation/slots.txt"

/**
 * Returns the first free creature animation slot in the range defined by slotMin and slotMax.
 * INT_VAR slotMin    Lowest available creature animation slot for the animation.
 * INT_VAR slotMax    Highest available creature animation slot for the animation.
 * INT_VAR slotSteps  How many slots to skip after each iteration, starting from slotMin.
 *                    Setting this parameter is useful if compatible animation slots are always
 *                    a fixed distance apart (e.g. at a distance of 0x10 each)
 * RET slot           A free animation slot. Returns -1 if none found.
 */
DEFINE_ACTION_FUNCTION FIND_FREE_ANIM_SLOT
INT_VAR
  slotMin   = 0
  slotMax   = (slotMin BAND 0xf000) + 0x1000
  slotSteps = 1
RET
  slot
BEGIN
  OUTER_SET slot = "-1"
  ACTION_IF (slotSteps < 1) BEGIN OUTER_SET slotSteps = 1 END
  ACTION_IF (slotMin < 0) BEGIN OUTER_SET slotMin = 0 END
  ACTION_IF (slotMax < 0) BEGIN OUTER_SET slotMax = 0 END
  ACTION_IF (slotMax < slotMin) BEGIN
    OUTER_SET tmp = slotMin
    OUTER_SET slotMin = slotMax
    OUTER_SET slotMax = tmp
  END

  // animslots.txt contains reserved creature animation slots
  COPY - ~%animationSlotsPath%~ ~%animationSlotsPath%~
    READ_ASCII 0 slotList (SOURCE_SIZE)
    FOR (idx = slotMin; idx < slotMax; idx += slotSteps) BEGIN
      LOOKUP_IDS_SYMBOL_OF_INT name ~animate~ idx
      PATCH_IF (~%name%~ STRING_EQUAL ~%idx%~) BEGIN
        LPF TO_HEX_NUMBER INT_VAR value = idx minDigits = 4 RET hexNumber END
        PATCH_IF (NOT FILE_EXISTS_IN_GAME ~%hexNumber%.ini~ AND
                  ~%slotList%~ STRING_CONTAINS_REGEXP ~"%hexNumber%"~ != 0) BEGIN
          SET slot = idx
          SET idx = slotMax
        END
      END
    END
END

DEFINE_PATCH_FUNCTION FIND_FREE_ANIM_SLOT
INT_VAR
  slotMin   = 0
  slotMax   = (slotMin BAND 0xf000) + 0x1000
  slotSteps = 1
RET
  slot
BEGIN
  INNER_ACTION BEGIN
    LAF FIND_FREE_ANIM_SLOT INT_VAR slotMin = slotMin slotMax = slotMax slotSteps = slotSteps RET slot END
  END
END


/**
 * Adds a new symbol to the current IDS file.
 */
DEFINE_PATCH_FUNCTION ADD_IDS_ENTRY
INT_VAR
  index = 1
  index_max = 255
STR_VAR
  symbol = ~~
RET
  index   // index of added entry, or -1 on error
BEGIN
  PATCH_IF (NOT ~%symbol%~ STR_EQ ~~) BEGIN
    PATCH_IF (index < 0) BEGIN SET index = 0 END
    PATCH_IF (index > index_max) BEGIN SET index = index_max END

    READ_2DA_ENTRIES_NOW ~table~ 2
    TEXT_SPRINT pool ~~
    FOR (idx = 0; idx < table; ++idx) BEGIN
      READ_2DA_ENTRY_FORMER ~table~ idx 0 value
      READ_2DA_ENTRY_FORMER ~table~ idx 1 string
      TEXT_SPRINT pool ~%pool%"%value%=%string%"~
    END

    SET found = 0
    FOR (idx = index; idx <= index_max; ++idx) BEGIN
      PATCH_IF (INDEX(~"%idx%=~ ~%pool%~) < 0 &&
                INDEX(~=%symbol%"~ ~%pool%~) < 0) BEGIN
        INSERT_2DA_ROW table 2 ~%index% %symbol%~
        SET found = 1
        SET index = idx
        SET idx = index_max + 1
      END
    END

    PATCH_IF (NOT found) BEGIN
      SET index = "-1"
    END
  END ELSE BEGIN
    SET index = "-1"
  END
END


// Returns the offset of the actor with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_ACTOR_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x54 ofs_base
  READ_SHORT 0x58 size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0x110 STR_VAR name RET offset index END
END

// Returns the offset of the trigger with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_TRIGGER_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x5c ofs_base
  READ_SHORT 0x5a size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0xc4 STR_VAR name RET offset index END
END

// Returns the offset of the spawn point with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_SPAWNPOINT_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x60 ofs_base
  READ_LONG 0x64 size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0xc8 STR_VAR name RET offset index END
END

// Returns the offset of the entrance with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_ENTRANCE_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x68 ofs_base
  READ_LONG 0x6c size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0x68 STR_VAR name RET offset index END
END

// Returns the offset of the container with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_CONTAINER_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x70 ofs_base
  READ_SHORT 0x74 size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0xc0 STR_VAR name RET offset index END
END

// Returns the offset of the ambient sound with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_AMBIENT_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x84 ofs_base
  READ_SHORT 0x82 size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0xd4 STR_VAR name RET offset index END
END

// Returns the offset of the variable with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_VARIABLE_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0x88 ofs_base
  READ_LONG 0x8c size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0x50 STR_VAR name RET offset index END
END

// Returns the offset of the door with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_DOOR_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0xa8 ofs_base
  READ_LONG 0xa4 size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0xc8 STR_VAR name RET offset index END
END

// Returns the offset of the animation with the specified name or -1 if not found
DEFINE_PATCH_FUNCTION GET_ANIMATION_OFFSET
STR_VAR
  name = ~~
RET
  offset index
BEGIN
  READ_LONG 0xb0 ofs_base
  READ_LONG 0xac size
  LPF __A7_GET_NAMED_OFFSET INT_VAR ofs_base size item_size = 0x4c STR_VAR name RET offset index END
END

// Internally used to find ARE structure of matching name
DEFINE_PATCH_FUNCTION __A7_GET_NAMED_OFFSET
INT_VAR
  ofs_base  = 0
  size      = 0
  item_size = 0
STR_VAR
  name      = ~~
RET
  offset index
BEGIN
  SET offset = "-1"
  SET index = "-1"
  PATCH_IF (item_size > 0) BEGIN
    FOR (idx = 0; idx < size; ++idx) BEGIN
      SET ofs = ofs_base + idx * item_size
      READ_ASCII ofs value (32) NULL
      PATCH_IF (~%value%~ STR_EQ ~%name%~) BEGIN
        SET offset = ofs
        SET index = idx
        SET idx = size
      END
    END
  END
END


// Adds a new entry for a conversable item
DEFINE_PATCH_FUNCTION ADD_ITEM_DIALOG
INT_VAR
  button_strref = 5689  // Default: "Converse"
  name_strref   = "-1"  // not used outside of PSTEE
STR_VAR
  itm_resref    = ~~
  dlg_resref    = ~~
BEGIN
  PATCH_IF (NOT ~%itm_resref%~ STR_EQ ~~) BEGIN
    PATCH_IF (~%dlg_resref%~ STR_EQ ~~) BEGIN TEXT_SPRINT dlg_resref ~%itm_resref%~ END
    COUNT_2DA_COLS numCols
    COUNT_2DA_ROWS numCols numRows
    TEXT_SPRINT entry ~%itm_resref%      %button_strref%  %dlg_resref%~
    PATCH_IF (numCols > 3) BEGIN
      TEXT_SPRINT entry ~%entry% %name_strref%~
      FOR (idx = 4; idx < numCols; ++idx) BEGIN TEXT_SPRINT entry ~%entry% *~ END
    END
    INSERT_2DA_ROW numRows numCols ~%entry%~
  END
END


// Adds a new definition to SPLPROT.2DA and returns its index
DEFINE_ACTION_FUNCTION ADD_SPLPROT_ENTRY
INT_VAR
  add_prefix  = 1   // whether to prefix the label by row number
STR_VAR
  label       = ~~  // optional entry label (value of first column)
  definition  = ~~  // definition without label
RET
  index             // returns -1 if entry could not be added
BEGIN
  OUTER_SET index = "-1"
  ACTION_IF (NOT ~%definition%~ STR_EQ ~~) BEGIN
    COPY_EXISTING ~splprot.2da~ ~override~
      COUNT_2DA_COLS numCols
      PATCH_IF (numCols = 4) BEGIN
        READ_2DA_ENTRIES_NOW table numCols
        // use existing entry if available
        FOR (row = 0; row < table; ++row) BEGIN
          READ_2DA_ENTRY_FORMER table row 1 stat
          PATCH_IF (~%stat%~ STRING_COMPARE_REGEXP ~[*+]~ = 0) BEGIN TEXT_SPRINT stat ~\%stat%~ END
          READ_2DA_ENTRY_FORMER table row 2 value
          PATCH_IF (~%value%~ STRING_COMPARE_REGEXP ~[*+]~ = 0) BEGIN TEXT_SPRINT value ~\%value%~ END
          READ_2DA_ENTRY_FORMER table row 3 rel
          PATCH_IF (~%rel%~ STRING_COMPARE_REGEXP ~[*+]~ = 0) BEGIN TEXT_SPRINT rel ~\%rel%~ END
          TEXT_SPRINT regexp ~[ %TAB%]+%stat%[ %TAB%]+%value%[ %TAB%]+%rel%[ %TAB%]*~
          PATCH_IF (~%definition%~ STRING_COMPARE_REGEXP ~%regexp%~ = 0) BEGIN
            SET index = row
            SET row = table
          END
        END

        // add new definition if needed
        PATCH_IF (index < 0) BEGIN
          SET index = table
          PATCH_IF (~%label%~ STR_EQ ~~) BEGIN TEXT_SPRINT label ~%index%~ END
          PATCH_IF (STRING_LENGTH ~%label%~ < 11) BEGIN
            TEXT_SPRINT label ~%label%          ~
            INNER_PATCH_SAVE label ~%label%~ BEGIN DELETE_BYTES 10 (BUFFER_LENGTH - 10) END
          END
          PATCH_IF (add_prefix) BEGIN
            SPRINT label ~%index%_%label%~
          END
          INSERT_2DA_ROW index numCols ~%label% %definition%~
          PRETTY_PRINT_2DA
        END
      END
    BUT_ONLY IF_EXISTS
  END
END


/**
 * Adds a new random treasure entry to RNDTRES.2DA. The entry is generated with a specified percentage for the given item.
 * This function also creates a treasure placeholder item if needed.
 * INT_VAR chance   The chance of the item to be generated (in percent).
 * STR_VAR treasure The resource name of the placeholder treasure item without extension
 * STR_VAR defItem  Default item for the columns not defined by chance.
 * STR_VAR item     The resource name of the item to generate by the random treasure item.
 * RET success      Returns non-zero on success and zero on fail.
 */
DEFINE_ACTION_FUNCTION DEFINE_RANDOM_TREASURE
INT_VAR
  chance    = 100
STR_VAR
  treasure  = ~~
  defItem   = ~A7#EMPTY~
  item      = ~~
RET
  success
BEGIN
  LAF DEFINE_RANDOM_TREASURE_EX INT_VAR chance_0 = chance STR_VAR treasure defItem item_0 = EVAL ~%item%~ RET success END
END


/**
 * Adds a new random treasure entry to RNDTRES.2DA. The entry is generated with the specified percentages of the given items.
 * This function also creates a treasure placeholder item if needed.
 * INT_VAR chance_x The chance of the associated item to be generated (in percent). x must be a sequential number, starting at 0.
 *                  Important: The sum of chances must not be greater than 100%.
 * STR_VAR treasure The resource name of the placeholder treasure item without extension
 * STR_VAR defItem  Default item for the columns not defined by chance_x.
 * STR_VAR item_x   The resource names of the items to generate by the random treasure item. x must be a sequential number, starting at 0.
 * RET success      Returns non-zero on success and zero on fail.
 */
DEFINE_ACTION_FUNCTION DEFINE_RANDOM_TREASURE_EX
INT_VAR
  // chance_0, chance_1, ...
STR_VAR
  treasure  = ~~
  defItem   = ~A7#EMPTY~
  // item_0, item_1, ...
RET
  success
BEGIN
  OUTER_SET success = 0
  ACTION_IF (FILE_EXISTS_IN_GAME ~rndtres.2da~ AND
             NOT ~%treasure%~ STRING_EQUAL ~~ AND
             STRING_LENGTH ~%treasure%~ <= 8) BEGIN
    // validating input
    OUTER_SET numItems = 0
    OUTER_SET failed = 0
    OUTER_SET sumChance = 0
    OUTER_FOR (idx = 0; idx < 100; ++idx) BEGIN
      ACTION_IF (VARIABLE_IS_SET $EVAL chance(~%idx%~) AND VARIABLE_IS_SET $EVAL item(~%idx%~)) BEGIN
        ACTION_IF (sumChance > 100) BEGIN OUTER_SET failed = 1 OUTER_SET idx = 100 END
        OUTER_SET valChance = $EVAL chance(~%idx%~)
        ACTION_IF (valChance < 0) BEGIN OUTER_SET $EVAL chance(~%idx%~) = 0 END
        ACTION_IF (valChance > 100) BEGIN OUTER_SET $EVAL chance(~%idx%~) = 100 END
        OUTER_SET sumChance += valChance

        OUTER_TEXT_SPRINT name $EVAL item(~%idx%~)
        ACTION_IF (~%name%~ STRING_EQUAL ~~ OR STRING_LENGTH ~%name%~ > 8) BEGIN OUTER_SET failed = 1 OUTER_SET idx = 100 END
      END ELSE BEGIN
        OUTER_SET numItems = idx
        OUTER_SET idx = 100
      END
    END
    ACTION_IF (numItems = 0) BEGIN OUTER_SET failed = 1 END

    ACTION_IF (failed = 0) BEGIN
      COPY_EXISTING ~rndtres.2da~ ~override~
        COUNT_2DA_COLS numCols
        COUNT_2DA_ROWS numCols numRows

        // check if entry already exists
        FOR (idx = 0; idx < numRows; ++idx) BEGIN
          READ_2DA_ENTRY idx 0 numCols name
          PATCH_IF (~%name%~ STRING_EQUAL_CASE ~%treasure%~) BEGIN
            SET failed = 1
            SET idx = numRows
          END
        END

        PATCH_IF (failed = 0) BEGIN
          // generating entry name
          TEXT_SPRINT newEntry ~%treasure%~
          FOR (idx = 9 - (STRING_LENGTH ~%treasure%~); idx > 0; --idx) BEGIN TEXT_SPRINT newEntry ~%newEntry% ~ END

          SET numCols -= 1  // exclude treasure name column
          SET sumItems = 0
          FOR (idxItem = 0; idxItem < numItems; ++idxItem) BEGIN
            // calculating item count
            SET itmChance = $EVAL chance(~%idxItem%~)
            TEXT_SPRINT itmName $EVAL item(~%idxItem%~)
            SET itmCount = (itmChance * numCols) / 100
            PATCH_IF (itmChance > 0 AND itmCount = 0) BEGIN SET itmCount += 1 END
            PATCH_IF (itmChance < 100 AND itmCount = numCols) BEGIN SET itmCount -= 1 END
            SET sumItems += itmCount
            PATCH_IF (sumItems <= numCols) BEGIN
              // adding item to entry
              FOR (col = 0; col < itmCount; ++col) BEGIN
                TEXT_SPRINT newEntry ~%newEntry%%itmName%~
                FOR (idx = 9 - (STRING_LENGTH ~%itmName%~); idx > 0; --idx) BEGIN TEXT_SPRINT newEntry ~%newEntry% ~ END
              END
            END ELSE BEGIN
              SET idxItem = numItems
            END
          END

          // adding empty items
          FOR (idx = 9 - (STRING_LENGTH ~%defItem%~); idx > 0; --idx) BEGIN TEXT_SPRINT defItem ~%defItem% ~ END
          FOR (col = sumItems; col < numCols; ++col) BEGIN
            TEXT_SPRINT newEntry ~%newEntry%%defItem%~
          END

          // adding entry to 2DA
          INSERT_2DA_ROW numRows (numCols + 1) ~%newEntry%~
        END

      ACTION_IF (failed = 0) BEGIN
        ACTION_IF (NOT FILE_EXISTS ~%treasure%.itm~ AND FILE_EXISTS_IN_GAME ~rndtre01.itm~) BEGIN
          COPY_EXISTING ~rndtre01.itm~ ~override/%treasure%.itm~
        END
        OUTER_SET success = 1
      END
    END
  END
END


/**
 * Adds the spell "Spacewarp" to the game.
 * INT_VAR priest_spell Whether the priest spell version should be installed.
 * INT_VAR mage_spell   Whether the mage spell version (and scroll) should be installed.
 */
DEFINE_ACTION_FUNCTION INSTALL_SPACEWARP
INT_VAR
  priest_spell = 0    // whether to install the priest spell
  mage_spell   = 0    // whether to install the mage spell
  add_to_shops = 0    // whether spell scrolls are added to shops (requires mage_spell != 0)
BEGIN
  ACTION_IF (priest_spell || mage_spell) BEGIN
    OUTER_SET projectile = IDS_OF_SYMBOL (~projectl~ ~a7#vtx~)
    ACTION_IF (projectile < 0) BEGIN
      ADD_PROJECTILE ~%MOD_FOLDER%/spells/a7#vtx.pro~
      OUTER_SET projectile = ~a7#vtx~
    END

    ACTION_IF (priest_spell && NOT FILE_EXISTS_IN_GAME ~a7#spp1.spl~) BEGIN
      COPY ~%MOD_FOLDER%/spells/a7#spp1.spl~ ~override~
        SAY UNIDENTIFIED_DESC @2130  // Spacewarp (priest spell)
        LPF ALTER_SPELL_HEADER
        INT_VAR projectile
        END
    END

    ACTION_IF (mage_spell && NOT FILE_EXISTS_IN_GAME ~a7#spw1.spl~) BEGIN
      COPY ~%MOD_FOLDER%/spells/a7#spw1.spl~ ~override~
        SAY UNIDENTIFIED_DESC @2131  // Spacewarp (mage spell)
        LPF ALTER_SPELL_HEADER
          INT_VAR projectile
        END
    END

    ACTION_IF (NOT FILE_EXISTS_IN_GAME ~a7#mscl2.itm~) BEGIN
      COPY ~%MOD_FOLDER%/spells/a7#mscl2.itm~ ~override~
        SAY IDENTIFIED_DESC @2131  // Spacewarp (mage spell)
    END

    ACTION_FOR_EACH file IN ~a7#vtxa.bam~ ~a7#vtxb.bam~ ~a7#fx01.wav~ ~a7#vtx.vvc~ BEGIN
      ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%file%~) BEGIN
        COPY ~%MOD_FOLDER%/spells/%file%~ ~override~
      END
    END

    ACTION_IF (mage_spell && add_to_shops) BEGIN
      ACTION_FOR_EACH area IN ~ar0702~ ~ar5011~ ~ar5502~ ~ar6400~ BEGIN
        ACTION_IF (NOT RESOURCE_CONTAINS ~%area%.BCS~ ~A7#SpacewarpMage~) BEGIN
          EXTEND_TOP ~%area%.BCS~ ~%MOD_FOLDER%/scripts/append_%area%.baf~
        END
      END
    END
  END
END


/**
 * Reads all lines from the current text file into an array.
 */
DEFINE_PATCH_FUNCTION READ_TEXT_LINES
INT_VAR upper = 0 // whether to upper-case the textual content
RET lines         // number of array elements
RET_ARRAY lines   // array containing text lines, numbered sequentially, starting at 0
BEGIN
  SET lines = 0
  SET ofs1 = 0
  CLEAR_ARRAY ~lines~
  WHILE (ofs1 >= 0) BEGIN
    SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
    PATCH_IF (ofs2 < 0) BEGIN SET ofs2 = BUFFER_LENGTH END
    READ_ASCII ofs1 line (ofs2 - ofs1)
    PATCH_IF (upper) BEGIN TO_UPPER ~line~ END
    TEXT_SPRINT $lines(~%lines%~) ~%line%~
    SET lines += 1
    SET ofs1 = INDEX_BUFFER(~[^%WNL%]~ ofs2)
  END

  // Workaround for WeiDU bug: return array must contain at least one element.
  PATCH_IF (lines = 0) BEGIN
    TEXT_SPRINT $lines(~%lines%~) ~~
  END
END
